#!/usr/bin/env python3

# 
# Copyright 2014 InQBarna Kenkyuu Jo SL 
# 
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
# 
#     http://www.apache.org/licenses/LICENSE-2.0 
# 
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License. 
#  


import argparse
import os.path
import logger
import walker
from logger import *
import re

def dir_check(dname):
    if not os.path.exists(dname):
        raise argparse.ArgumentTypeError("%s is not a valid directory" % dname)
    elif not os.path.isdir(dname):
        raise argparse.ArgumentTypeError("%s is not a valid directory" % dname)
    return dname

def regex_type(argval):
    return re.compile(argval)


def main(args):
    import correspondences

    logger.VERBOSITY = args.verbose if args.verbose else 0
    praw(repr(args))

    pinfo("Will open url '%s'" % args.url)

    androidx_correspondences = correspondences.Correspondences(args.url, args.artifact_url)

    srcTree = walker.SourceTree(args.src, args.exclude_dir)
    types = []
    if not args.no_source:
        types.append(walker.SourceFile.TYPE_SRC)

    if not args.no_buildfiles:
        types.append(walker.SourceFile.TYPE_BUILDFILE)
        types.append(walker.SourceFile.TYPE_CONFIG)

    if not args.no_ui:
        types.append(walker.SourceFile.TYPE_UI)

    notes = []
    for s in srcTree.files(*types):
        if args.affected_files:
            print("Would check %s" % s)
        else:
            pinfo("Procesing: %s" % s)
            processor = s.processor(args.dry_run)
            try:
                replacement = None
                while True:
                    try:
                        original = processor.send(replacement)
                        if original:
                            replacement = androidx_correspondences.fix_source_line(original, s.fileType)
                        else:
                            replacement = None
                    except correspondences.ProcessingError as pe:
                        notes.append((s, pe.message))
                        replacement = original
            except StopIteration:
                pinfo("ended processing of '%s'" % s)
                pass

    for source, msg in notes:
        pwarn("Issue in %s: %s" % (source._path, msg))

if __name__ == "__main__":
    import sys
    parser = argparse.ArgumentParser()
    parser.add_argument("-v", "--verbose", help="Increment verbosity level", action="count")
    parser.add_argument("src", help="Sources directory", type=dir_check)
    parser.add_argument("-u", "--url", help="CSV url", default="https://developer.android.com/topic/libraries/support-library/downloads/androidx-class-mapping.csv")
    parser.add_argument("-a", "--artifact-url", help="Artifact correspondence URL", default="https://developer.android.com/topic/libraries/support-library/downloads/androidx-artifact-mapping.csv")
    parser.add_argument("-e", "--exclude-dir", help="exclude source dirs mathing this value. This option can be given many times", action="append", type=regex_type)
    parser.add_argument("-n", "--dry-run", help="dry run", action="store_true", required=False)
    parser.add_argument("--no-source", help="Disable source files parsing", action="store_true", required=False)
    parser.add_argument("--no-buildfiles", help="Disable build files parsing", action="store_true", required=False)
    parser.add_argument("--affected-files", help="Just print files that would be changed and exits", action="store_true", required=False)
    parser.add_argument("--no-ui", help="Disable UI files a.k.a XML files", action="store_true", required=False)
    args = parser.parse_args()

    del sys.argv[1:]

    main(args)
